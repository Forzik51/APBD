// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication7.Contexts;

#nullable disable

namespace ZAD_10.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240603105716_create tabels")]
    partial class createtabels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.4.24267.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication7.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PK_account");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountEmail")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("email");

                    b.Property<string>("AccountFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("AccountLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("AccountPhone")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("phone");

                    b.Property<int>("AccountRole")
                        .HasColumnType("int")
                        .HasColumnName("FK_role");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            AccountEmail = "bvsdkub@fbh.drg",
                            AccountFirstName = "Agata",
                            AccountLastName = "Mielanska",
                            AccountRole = 1,
                            RoleId = 0
                        });
                });

            modelBuilder.Entity("WebApplication7.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PK_category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "catname"
                        });
                });

            modelBuilder.Entity("WebApplication7.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PK_product");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<double>("ProductDepth")
                        .HasColumnType("float")
                        .HasColumnName("depth");

                    b.Property<double>("ProductHeight")
                        .HasColumnType("float")
                        .HasColumnName("height");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<double>("ProductWeight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.Property<double>("ProductWidth")
                        .HasColumnType("float")
                        .HasColumnName("width");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductDepth = 20.199999999999999,
                            ProductHeight = 30.300000000000001,
                            ProductName = "prodname",
                            ProductWeight = 10.5,
                            ProductWidth = 80.099999999999994
                        });
                });

            modelBuilder.Entity("WebApplication7.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryProduct")
                        .HasColumnType("int")
                        .HasColumnName("FK_product");

                    b.Property<int>("ProductCategoryCategory")
                        .HasColumnType("int")
                        .HasColumnName("FK_category");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Product")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductCategoryProduct", "ProductCategoryCategory");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Products_Categories");

                    b.HasData(
                        new
                        {
                            ProductCategoryProduct = 1,
                            ProductCategoryCategory = 1,
                            Category = 0,
                            Product = 0
                        });
                });

            modelBuilder.Entity("WebApplication7.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PK_role");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "marketing"
                        });
                });

            modelBuilder.Entity("WebApplication7.Models.ShoppingCarts", b =>
                {
                    b.Property<int>("ShoppingCartsAccount")
                        .HasColumnType("int")
                        .HasColumnName("FK_account");

                    b.Property<int>("ShoppingCartsProduct")
                        .HasColumnType("int")
                        .HasColumnName("FK_product");

                    b.Property<int>("Account")
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Product")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartsAmount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.HasKey("ShoppingCartsAccount", "ShoppingCartsProduct");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProductId");

                    b.ToTable("Shopping_Carts");

                    b.HasData(
                        new
                        {
                            ShoppingCartsAccount = 1,
                            ShoppingCartsProduct = 1,
                            Account = 0,
                            Product = 0,
                            ShoppingCartsAmount = 5
                        });
                });

            modelBuilder.Entity("WebApplication7.Models.Account", b =>
                {
                    b.HasOne("WebApplication7.Models.Role", null)
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication7.Models.ProductCategory", b =>
                {
                    b.HasOne("WebApplication7.Models.Category", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("WebApplication7.Models.Product", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("WebApplication7.Models.ShoppingCarts", b =>
                {
                    b.HasOne("WebApplication7.Models.Account", null)
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("AccountId");

                    b.HasOne("WebApplication7.Models.Product", null)
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("WebApplication7.Models.Account", b =>
                {
                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("WebApplication7.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("WebApplication7.Models.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("WebApplication7.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
